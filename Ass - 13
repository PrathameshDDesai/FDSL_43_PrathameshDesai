#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
    struct node *prev;
};

struct node *head = NULL, *temp, *newnode;

void insertAtFirst() {
    newnode = malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    newnode->prev = NULL;
    newnode->next = head;

    if (head != NULL)
        head->prev = newnode;

    head = newnode;
    printf("Node inserted at first\n");
}

void insertAtLast() {
    newnode = malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;
    newnode->prev = NULL;

    if (head == NULL) {
        head = newnode;
    } else {
        temp = head;
        while (temp->next != NULL)
            temp = temp->next;

        temp->next = newnode;
        newnode->prev = temp;
    }
    printf("Node inserted at last\n");
}

void insertAtPosition() {
    int pos, i = 1, count = 0;
    newnode = malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    printf("Enter the data: ");
    scanf("%d", &newnode->data);

    // Count nodes
    temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    printf("Enter the position (1 to %d): ", count + 1);
    scanf("%d", &pos);

    if (pos < 1 || pos > count + 1) {
        printf("Invalid position\n");
        free(newnode);
        return;
    }

    if (pos == 1) {
        insertAtFirst();
    } else if (pos == count + 1) {
        insertAtLast();
    } else {
        temp = head;
        struct node *prevnode = NULL;
        i = 1;
        while (i < pos) {
            prevnode = temp;
            temp = temp->next;
            i++;
        }

        newnode->next = temp;
        newnode->prev = prevnode;
        prevnode->next = newnode;
        temp->prev = newnode;

        printf("Node inserted at position %d\n", pos);
    }
}

void deleteAtFirst() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    temp = head;
    head = head->next;
    if (head != NULL)
        head->prev = NULL;

    free(temp);
    printf("Node deleted from first\n");
}

void deleteAtLast() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    temp = head;
    if (temp->next == NULL) {
        // Only one node
        free(head);
        head = NULL;
    } else {
        while (temp->next != NULL)
            temp = temp->next;

        temp->prev->next = NULL;
        free(temp);
    }
    printf("Node deleted from last\n");
}

void deleteAtPosition() {
    int pos, count = 0, i = 1;
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    printf("Enter the position to delete (1 to %d): ", count);
    scanf("%d", &pos);

    if (pos < 1 || pos > count) {
        printf("Invalid position\n");
        return;
    }

    if (pos == 1) {
        deleteAtFirst();
    } else if (pos == count) {
        deleteAtLast();
    } else {
        temp = head;
        while (i < pos) {
            temp = temp->next;
            i++;
        }
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        free(temp);

        printf("Node deleted at position %d\n", pos);
    }
}

void display() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    temp = head;
    printf("List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void reverseDisplay() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    temp = head;
    while (temp->next != NULL)
        temp = temp->next;

    printf("Reversed List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->prev;
    }
    printf("\n");
}

int main() {
    int choice;
    printf("***** Welcome to Doubly Linked List *****\n");
    while (1) {
        printf("\n1. Insert at first\n2. Insert at last\n3. Insert at position\n");
        printf("4. Delete at first\n5. Delete at last\n6. Delete at position\n");
        printf("7. Display\n8. Reverse display\n9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: insertAtFirst(); break;
            case 2: insertAtLast(); break;
            case 3: insertAtPosition(); break;
            case 4: deleteAtFirst(); break;
            case 5: deleteAtLast(); break;
            case 6: deleteAtPosition(); break;
            case 7: display(); break;
            case 8: reverseDisplay(); break;
            case 9: printf("Exiting...\n"); return 0;
            default: printf("Invalid choice\n"); break;
        }
    }
}
