#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *front = NULL, *rear = NULL, *temp;

void enqueue(int data) {
    struct node *newnode = malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    newnode->data = data;
    newnode->next = NULL;

    if (rear == NULL) {
        front = rear = newnode;
    } else {
        rear->next = newnode;
        rear = newnode;
    }
    printf("Data %d enqueued.\n", data);
}

void dequeue() {
    if (front == NULL) {
        printf("Queue is empty.\n");
    } else {
        temp = front;
        front = front->next;
        printf("Dequeued data: %d\n", temp->data);
        free(temp);
        if (front == NULL) {
            rear = NULL;  
        }
    }
}

void display() {
    if (front == NULL) {
        printf("Queue is empty.\n");
    } else {
        temp = front;
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int choice, data;
    printf("-------WELCOME TO QUEUE USING SINGLY LINKED LIST ------");
    while (1) {
        printf("\n1. Enqueue data\n2. Dequeue data\n3. Display queue\n4. Exit\nEnter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting.\n");
                return 0;
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
